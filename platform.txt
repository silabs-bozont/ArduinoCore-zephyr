# Arduino Zephyr (BETA) Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=Arduino Zephyr Boards (BETA)
version=9.9.9

# Compile variables
# ------------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={build.compiler_path}
compiler.c.cmd={build.crossprefix}gcc
compiler.c.flags=-g -c {compiler.warning_flags} {compiler.zephyr.macros} "@{compiler.zephyr.cflags_file}" -MMD -mcpu={build.mcu} {build.float-abi} {build.fpu}
compiler.c.elf.cmd={build.crossprefix}g++
compiler.c.elf.flags=-Wl,--gc-sections -mcpu={build.mcu} {build.float-abi} {build.fpu} -std=gnu++17
compiler.S.cmd={build.crossprefix}g++
compiler.S.flags=-c -x assembler-with-cpp -mcpu={build.mcu} {build.fpu}
compiler.cpp.cmd={build.crossprefix}g++
compiler.cpp.flags=-g -Os -std=gnu++17 -c {compiler.warning_flags} {compiler.zephyr.macros} "@{compiler.zephyr.cxxflags_file}" {compiler.zephyr.common_ldflags} {compiler.zephyr.extra_ldflags} {compiler.zephyr.common_cxxflags} {compiler.zephyr.extra_cxxflags} -MMD -mcpu={build.mcu} {build.float-abi} {build.fpu}
compiler.ar.cmd={build.crossprefix}ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd={build.crossprefix}objcopy
compiler.ldflags=
compiler.libraries.ldflags=
compiler.size.cmd={build.crossprefix}size
compiler.define=-DARDUINO=

compiler.zephyr.includes_file={build.variant.path}/includes.txt
compiler.zephyr.cflags_file={build.variant.path}/cflags.txt
compiler.zephyr.cxxflags_file={build.variant.path}/cxxflags.txt
compiler.zephyr.macros="-imacros{build.variant.path}/llext-edk/include/zephyr/include/generated/zephyr/autoconf.h" "-imacros{build.variant.path}/llext-edk/include/zephyr/include/zephyr/toolchain/zephyr_stdint.h"
compiler.zephyr.common_cxxflags=-fdata-sections -ffunction-sections -fno-unwind-tables
compiler.zephyr.common_ldflags=-fno-exceptions -fno-rtti -fno-threadsafe-statics -fno-unwind-tables -fno-use-cxa-atexit -lstdc++ -lsupc++ -lnosys -nostdlib

compiler.zephyr.extra_cxxflags=
compiler.zephyr.extra_ldflags=-lstdc++ -lsupc++

# these can be overriden in boards.txt
build.extra_flags=
build.extra_ldflags=
build.link_mode=dynamic
upload.extension=elf-zsk.bin

build.ldscript.path={runtime.platform.path}/variants/_ldscripts
build.link_command="{compiler.path}{compiler.c.elf.cmd}" "-L{build.path}" "-L{build.variant.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {build.extra_flags} {build.extra_ldflags} {compiler.zephyr.common_ldflags} --specs=picolibc.specs --specs=nosys.specs {compiler.ldflags} {object_files} -Wl,--start-group "{build.path}/{archive_file}" {compiler.zephyr.extra_ldflags} {compiler.libraries.ldflags} -Wl,--end-group {build.link_args.{build.link_mode}}

build.check_command-dynamic={build.link_command} {build.link_args.check-dynamic} -o "{build.path}/{build.project_name}_check.tmp"
build.check_command-static=/bin/true
build.check_command-static.windows=cmd /C cd .
build.combine_command={build.link_command} {build.link_args.build-{build.link_mode}} {build.link_args.build-common}

# link_args.* are included by any link_command depending on the link_mode
build.link_args.dynamic=-e main
build.link_args.static=-lc -lm -lgcc -Wl,--wrap=random -Wl,--wrap=calloc -Wl,--wrap=free -Wl,--wrap=malloc -Wl,--wrap=realloc

# link_args.check-* are used to check the build. Only LLEXT needs these to emulate a static build (no -r!).
build.link_args.check-dynamic="-T{build.variant.path}/syms-dynamic.ld" "-T{build.ldscript.path}/memory-check.ld" "-T{build.ldscript.path}/build-static.ld"

# link_args.build-* are used to create the final binary. -common are added to both static and dynamic.
build.link_args.build-dynamic="-T{build.ldscript.path}/build-dynamic.ld" -r
build.link_args.build-static="-T{build.variant.path}/syms-static.ld" "-T{build.ldscript.path}/memory-static.ld" "-T{build.ldscript.path}/build-static.ld"
build.link_args.build-common="-Wl,-Map,{build.path}/{build.project_name}.map" -o "{build.path}/{build.project_name}_debug.elf"

# zsk_args are used to create the final binary with zephyr-sketch-tool
build.zsk_args.debug=
build.zsk_args.mode-dynamic=
build.zsk_args.mode-static=-prelinked

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# {build.library_discovery_phase} is set to 1 by the builder during library discovery.
# (this is available since arduino-builder>=1.5.5, keeping the default here for backward compatiblity)
build.library_discovery_phase=0
build.library_discovery_phase_flag=-DARDUINO_LIBRARY_DISCOVERY_PHASE={build.library_discovery_phase}

# USB Flags
# ---------
build.usb_flags=

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"

build.zip.pattern={recipe.size.pattern}

# Linux compile patterns
# -----------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_ZEPHYR {build.library_discovery_phase_flag} {build.extra_flags} {build.extra_ldflags} {compiler.c.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" {includes} "-iprefix{build.variant.path}" "@{compiler.zephyr.includes_file}" -o "{object_file}" "{source_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_ZEPHYR {build.library_discovery_phase_flag} {includes} {build.extra_flags} {build.extra_ldflags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.variant.path}" "@{compiler.zephyr.includes_file}" "{source_file}" -o "{object_file}"

## Compile asm files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_ZEPHYR {includes} {build.extra_flags} {build.extra_ldflags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.variant.path}" "@{compiler.zephyr.includes_file}" "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.1.pattern={build.check_command-{build.link_mode}}
recipe.c.combine.2.pattern={build.combine_command}
recipe.c.combine.pattern={build.combine_command}
recipe.hooks.linking.postlink.1.pattern="{compiler.path}{build.crossprefix}strip" --strip-debug "{build.path}/{build.project_name}_debug.elf" -o "{build.path}/{build.project_name}.elf"

## Create eeprom
recipe.objcopy.eep.pattern=

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Mangle the file
recipe.hooks.objcopy.postobjcopy.1.pattern="{runtime.tools.zephyr-sketch-tool.path}/zephyr-sketch-tool" {build.zsk_args.debug} {build.zsk_args.mode-{build.link_mode}} "{build.path}/{build.project_name}.elf"
recipe.hooks.objcopy.postobjcopy.2.pattern="{runtime.tools.zephyr-sketch-tool.path}/zephyr-sketch-tool" {build.zsk_args.debug} {build.zsk_args.mode-{build.link_mode}} "{build.path}/{build.project_name}.bin"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*
recipe.size.regex=^(?:\.data|\.text|\.rodata)\S*?\s+([0-9]+).*

## Save output file
recipe.output.tmp_file={build.project_name}.{upload.extension}
recipe.output.save_file={build.project_name}.{build.variant}.{upload.extension}


# Required discoveries and monitors
# ---------------------------------
pluggable_discovery.required.0=builtin:serial-discovery
pluggable_discovery.required.1=builtin:mdns-discovery
pluggable_monitor.required.serial=builtin:serial-monitor


# Uploader tools
# --------------

#
# OpenOCD
#
tools.openocd.path={runtime.tools.openocd-0.11.0-arduino2.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern="{path}/{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.erase.params.verbose=-d2
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; {bootloader.extra_action.preflash}; program {{runtime.platform.path}/bootloaders/{bootloader.file}}; reset run; shutdown"


#
# OpenOCD (Silabs)
#
tools.sl_openocd.path={runtime.tools.openocd-0.12.0-arduino1-static.path}
tools.sl_openocd.cmd={path}/bin/openocd

tools.sl_openocd.upload.params.verbose=-d2
tools.sl_openocd.upload.params.quiet=-d0
tools.sl_openocd.upload.pattern="{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" -f interface/cmsis-dap.cfg -f target/efm32s2_g23.cfg -c "init; reset_config srst_nogate; reset halt; flash write_image erase {{build.path}/{build.project_name}.elf-zsk.bin} {upload.address} bin; reset; exit"

tools.sl_openocd.program.params.verbose=-d2
tools.sl_openocd.program.params.quiet=-d0
tools.sl_openocd.program.pattern="{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" -f interface/cmsis-dap.cfg -f target/efm32s2_g23.cfg -c "init; reset_config srst_nogate; reset halt; flash write_image erase {{build.path}/{build.project_name}.elf-zsk.bin} {upload.address} bin; reset; exit"

tools.sl_openocd.erase.params.verbose=-d2
tools.sl_openocd.erase.params.quiet=-d0
tools.sl_openocd.erase.pattern="{cmd}" {erase.verbose} -s "{path}/share/openocd/scripts/" -f interface/cmsis-dap.cfg -f target/efm32s2_g23.cfg -c "init; reset_config srst_nogate; reset halt; flash erase_sector 0 1 last; exit"

tools.sl_openocd.bootloader.params.verbose=-d2
tools.sl_openocd.bootloader.params.quiet=-d0
tools.sl_openocd.bootloader.pattern="{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" -f interface/cmsis-dap.cfg -f target/efm32s2_g23.cfg -c "init; reset_config srst_nogate; reset halt; program {{runtime.platform.path}/firmwares/{bootloader.file}}; reset; exit"


#
# BOSSA
#
tools.bossac.path={runtime.tools.bossac-1.9.1-arduino2.path}
tools.bossac.cmd=bossac
tools.bossac.cmd.windows=bossac.exe

tools.bossac.upload.params.verbose=-d
tools.bossac.upload.params.quiet=
tools.bossac.upload.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U -i -e -w "{build.path}/{build.project_name}.{upload.extension}" --offset {upload.address} -R

tools.bossac.bootloader.params.verbose=-d
tools.bossac.bootloader.params.quiet=
tools.bossac.bootloader.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U -i -e -w "{runtime.platform.path}/firmwares/{bootloader.file}" --offset {bootloader.address} -R

tools.bossac.erase.params.verbose=
tools.bossac.erase.params.quiet=
tools.bossac.erase.pattern=

#
# STM32FLASH
#
tools.stm32flash.cmd=stm32flash
tools.stm32flash.path={runtime.platform.path}/tools/windows
tools.stm32flash.path.macosx={runtime.platform.path}/tools/macosx
tools.stm32flash.path.linux={runtime.platform.path}/tools/linux
tools.stm32flash.upload.params.verbose=-v
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.program.params.verbose=-v
tools.stm32flash.program.params.quiet=
tools.stm32flash.program.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.erase.params.verbose=-v
tools.stm32flash.erase.params.quiet=
tools.stm32flash.erase.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400

#
# DFU_UTIL
#

upload.dfuse=--dfuse-address={upload.address}:leave
bootloader.dfuse=--dfuse-address={bootloader.address}:leave

tools.dfu-util.path={runtime.tools.dfu-util.path}
tools.dfu-util.cmd=dfu-util
tools.dfu-util.upload.params.verbose=-d
tools.dfu-util.upload.params.quiet=
tools.dfu-util.upload.pattern="{path}/{cmd}" --device ,{upload.vid}:{upload.pid} -D "{build.path}/{build.project_name}.{upload.extension}" -a{upload.interface} {upload.dfuse}

tools.dfu-util.bootloader.params.verbose=-d
tools.dfu-util.bootloader.params.quiet=
tools.dfu-util.bootloader.pattern="{path}/{cmd}" --device ,{bootloader.vid}:{bootloader.pid} -D "{runtime.platform.path}/firmwares/{bootloader.file}" -a{bootloader.interface} {bootloader.dfuse}

tools.dfu-util.erase.params.verbose=
tools.dfu-util.erase.params.quiet=
tools.dfu-util.erase.pattern=

#
# PICOTOOL
#
tools.picotool.path={runtime.tools.rp2040tools.path}
tools.picotool.cmd=rp2040load
tools.picotool.upload.params.verbose=-v
tools.picotool.upload.params.quiet=
tools.picotool.upload.pattern="{path}/{cmd}" {upload.verbose} -D "{build.path}/{build.project_name}.elf"

#
# IMGTOOL
#

tools.imgtool.path={runtime.tools.imgtool.path}
tools.imgtool.cmd=imgtool
tools.imgtool.flags=sign --key "{build.keys.keychain}/{build.keys.sign_key}" --encrypt "{build.keys.keychain}/{build.keys.encrypt_key}" "{build.path}/{build.project_name}.bin" "{build.path}/{build.project_name}.bin" --align {build.alignment} --max-align {build.alignment} --version {build.version} --header-size {build.header_size} --pad-header --slot-size {build.slot_size}

#
# ADB WRAPPER
#

tools.adb.path={runtime.tools.adb.path}
tools.adb.cmd=adb
tools.adb.upload.params.verbose=-v
tools.adb.upload.params.quiet=
tools.adb.upload.pattern="{path}/{cmd}" push "{build.path}/{build.project_name}.elf" "/tmp/arduino/m4-user-sketch.elf"

#
# REMOTEOCD
#
tools.remoteocd.path={runtime.tools.remoteocd.path}
tools.remoteocd.cmd=remoteocd
tools.remoteocd.upload.params.verbose=--verbose
tools.remoteocd.upload.params.quiet=
tools.remoteocd.upload.pattern="{path}/{cmd}" upload --adb-path "{runtime.tools.adb.path}/adb" -s "{upload.port.properties.serialNumber}" -f "{build.variant.path}/{openocd_cfg}" "{upload.verbose}" "{build.path}/{build.project_name}.{upload.extension}" 

tools.remoteocd.bootloader.params.verbose=--verbose
tools.remoteocd.bootloader.params.quiet=
tools.remoteocd.erase.pattern=
tools.remoteocd.bootloader.pattern="{path}/{cmd}" upload --adb-path "{runtime.tools.adb.path}/adb" -s "{upload.port.properties.serialNumber}" -f "{build.variant.path}/flash_bootloader.cfg" "{upload.verbose}" "{runtime.platform.path}/firmwares/{bootloader.file}" 

tools.remoteocd_network.upload.protocol=network
tools.remoteocd_network.upload.field.password=Password
tools.remoteocd_network.upload.field.password.secret=true
tools.remoteocd_network.path={runtime.tools.remoteocd.path}
tools.remoteocd_network.cmd=remoteocd
tools.remoteocd_network.upload.params.verbose=--verbose
tools.remoteocd_network.upload.params.quiet=
tools.remoteocd_network.upload.pattern="{path}/{cmd}" upload -a "{upload.port.address}" --password "{upload.field.password}" -f "{build.variant.path}/{openocd_cfg}" "{upload.verbose}" "{build.path}/{build.project_name}.{upload.extension}" 

#
# PYOCD WRAPPER
#

# TODO: at the moment, install pyocd manually (with provided script)
#tools.pyocd.path={runtime.tools.pyocd.path}
tools.pyocd.path=
tools.pyocd.cmd=pyocd
tools.pyocd.upload.params.verbose=
tools.pyocd.upload.params.quiet=
tools.pyocd.upload.pattern="{cmd}" load --target {upload.target} {build.path}/{build.project_name}.{upload.extension}@{upload.address}

tools.pyocd.bootloader.params.verbose=
tools.pyocd.bootloader.params.quiet=
tools.pyocd.bootloader.pattern="{cmd}" load --target {bootloader.target} "{runtime.platform.path}/firmwares/{bootloader.file}"

tools.pyocd.erase.params.verbose=
tools.pyocd.erase.params.quiet=
tools.pyocd.erase.pattern=


#
# JLinkExe WRAPPER
#

tools.jlink.path={runtime.tools.jlink.path}
tools.jlink.cmd.linux=JLinkExe
tools.jlink.cmd.windows=JLink.exe
tools.jlink.cmd.darwin=JLinkExe
tools.jlink.upload.params.verbose=-v
tools.jlink.upload.params.quiet=
tools.jlink.upload.pattern="{path}/{cmd}" -CommanderScript "{build.path}/flasher.jlink"


#
# Debugger
#

tools.gdb.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/
tools.gdb.cmd=arm-none-eabi-gdb
tools.gdb.cmd.windows=arm-none-eabi-gdb.exe

debug.executable={build.path}/{build.project_name}_debug.elf
debug.toolchain=gcc
debug.toolchain.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/
debug.toolchain.prefix=arm-none-eabi
debug.server=openocd
debug.server.openocd.path={runtime.tools.openocd-0.11.0-arduino2.path}/bin/openocd
debug.server.openocd.scripts_dir={runtime.tools.openocd-0.11.0-arduino2.path}/share/openocd/scripts/

debug.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2
debug.cortex-debug.custom.postAttachCommands.1=monitor reset halt
debug.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync
debug.cortex-debug.custom.postAttachCommands.3=c
debug.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt
debug.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync
debug.cortex-debug.custom.overrideRestartCommands.2=c

debug.server.openocd.path={runtime.tools.openocd-0.12.0-arduino1-static.path}/bin/openocd
debug.server.openocd.scripts_dir={runtime.tools.openocd-0.12.0-arduino1-static.path}/share/openocd/scripts/
